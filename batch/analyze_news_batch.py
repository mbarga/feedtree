# -*- coding: UTF-8 -*-

from settings import db, APILIMIT, API_BASE_URL, ALCHEMY_API_KEY
import requests

import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# get a set of all category streams
categories = db.categories
articles = db.articles

# for each stream process sentiment API (# streams/ 1000 = num of articles to analyze)
article_sentiments = {}
for category in categories.find():
    index = 0
    sum = 0
    for article in articles.find({'parent_id':category['id']}):
        if index > 20:
            break
        link = article['alternate'][0]['href']
        if link is not None:
            index += 1
            quest_url = API_BASE_URL + \
                        "?url=" + link + \
                        "&apikey=" + ALCHEMY_API_KEY + \
                        "&outputMode=" + "json"
            logger.info("Calling api: " + link)
            res = requests.get(url=quest_url)
            res = res.json()
            # sample response
            # {
            #     "status": "OK",
            #     "usage": "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
            #     "url": "https://archive.ics.uci.edu/ml/datasets/Sentiment+Labelled+Sentences",
            #     "totalTransactions": "1",
            #     "language": "english",
            #     "docSentiment": {
            #         "mixed": "1",
            #         "score": "0.0814209",
            #         "type": "positive"
            #     }
            # }
            try:
                score = float(res['docSentiment']['score'])
                sum += score
            except:
                pass

    avg = sum/20
    article_sentiments[category['label']] = avg
    # print article['title']

print "done"
